// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DataAccess.Models;

namespace DataAccess.Contexts
{
    public partial class NickDbContext : DbContext
    {
        public NickDbContext()
        {
        }

        public NickDbContext(DbContextOptions<NickDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Developers> Developers { get; set; } = null!;
        public virtual DbSet<Games> Games { get; set; } = null!;
        public virtual DbSet<GamesDevelopersLink> GamesDevelopersLink { get; set; } = null!;
        public virtual DbSet<GamesGenresLookupLink> GamesGenresLookupLink { get; set; } = null!;
        public virtual DbSet<GamesPlatformsLink> GamesPlatformsLink { get; set; } = null!;
        public virtual DbSet<GamesPublishersLink> GamesPublishersLink { get; set; } = null!;
        public virtual DbSet<GenresLookup> GenresLookup { get; set; } = null!;
        public virtual DbSet<Platforms> Platforms { get; set; } = null!;
        public virtual DbSet<PlayRecordComments> PlayRecordComments { get; set; } = null!;
        public virtual DbSet<PlayRecords> PlayRecords { get; set; } = null!;
        public virtual DbSet<Publishers> Publishers { get; set; } = null!;
        public virtual DbSet<UserRelationship> UserRelationship { get; set; } = null!;
        public virtual DbSet<UserRelationshipTypeLookup> UserRelationshipTypeLookup { get; set; } = null!;
        public virtual DbSet<Users> Users { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_general_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<GamesDevelopersLink>(entity =>
            {
                entity.HasOne(d => d.Developer)
                    .WithMany(p => p.GamesDevelopersLink)
                    .HasForeignKey(d => d.DeveloperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_developers_link_ibfk_2");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.GamesDevelopersLink)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_developers_link_ibfk_1");
            });

            modelBuilder.Entity<GamesGenresLookupLink>(entity =>
            {
                entity.HasOne(d => d.Game)
                    .WithMany(p => p.GamesGenresLookupLink)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_genres_lookup_link_ibfk_1");

                entity.HasOne(d => d.GenreLookup)
                    .WithMany(p => p.GamesGenresLookupLink)
                    .HasForeignKey(d => d.GenreLookupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_genres_lookup_link_ibfk_2");
            });

            modelBuilder.Entity<GamesPlatformsLink>(entity =>
            {
                entity.HasOne(d => d.Game)
                    .WithMany(p => p.GamesPlatformsLink)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_platforms_link_ibfk_1");

                entity.HasOne(d => d.Platform)
                    .WithMany(p => p.GamesPlatformsLink)
                    .HasForeignKey(d => d.PlatformId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_platforms_link_ibfk_2");
            });

            modelBuilder.Entity<GamesPublishersLink>(entity =>
            {
                entity.HasOne(d => d.Game)
                    .WithMany(p => p.GamesPublishersLink)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_publishers_link_ibfk_1");

                entity.HasOne(d => d.Publisher)
                    .WithMany(p => p.GamesPublishersLink)
                    .HasForeignKey(d => d.PublisherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("games_publishers_link_ibfk_2");
            });

            modelBuilder.Entity<PlayRecordComments>(entity =>
            {
                entity.HasOne(d => d.PlayRecord)
                    .WithMany(p => p.PlayRecordComments)
                    .HasForeignKey(d => d.PlayRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("play_record_comments_ibfk_2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PlayRecordComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("play_record_comments_ibfk_1");
            });

            modelBuilder.Entity<PlayRecords>(entity =>
            {
                entity.HasOne(d => d.Game)
                    .WithMany(p => p.PlayRecords)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("play_records_ibfk_2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PlayRecords)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("play_records_ibfk_1");
            });

            modelBuilder.Entity<UserRelationship>(entity =>
            {
                entity.HasOne(d => d.Friend)
                    .WithMany(p => p.UserRelationshipFriend)
                    .HasForeignKey(d => d.FriendId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("user_relationship_ibfk_2");

                entity.HasOne(d => d.RelationshipTypeLookup)
                    .WithMany(p => p.UserRelationship)
                    .HasForeignKey(d => d.RelationshipTypeLookupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("user_relationship_ibfk_3");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRelationshipUser)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("user_relationship_ibfk_1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}