// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;

namespace DataAccess.Contexts;

public partial class DockerDbContext : DbContext
{
    public DockerDbContext(DbContextOptions<DockerDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Developers> Developers { get; set; }

    public virtual DbSet<Games> Games { get; set; }

    public virtual DbSet<GamesDevelopersLink> GamesDevelopersLink { get; set; }

    public virtual DbSet<GamesGenresLookupLink> GamesGenresLookupLink { get; set; }

    public virtual DbSet<GamesPlatformsLink> GamesPlatformsLink { get; set; }

    public virtual DbSet<GamesPublishersLink> GamesPublishersLink { get; set; }

    public virtual DbSet<GenresLookup> GenresLookup { get; set; }

    public virtual DbSet<Platforms> Platforms { get; set; }

    public virtual DbSet<PlayRecordComments> PlayRecordComments { get; set; }

    public virtual DbSet<PlayRecords> PlayRecords { get; set; }

    public virtual DbSet<Publishers> Publishers { get; set; }

    public virtual DbSet<UserRelationship> UserRelationship { get; set; }

    public virtual DbSet<UserRelationshipTypeLookup> UserRelationshipTypeLookup { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_general_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Developers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Games>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<GamesDevelopersLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Developer).WithMany(p => p.GamesDevelopersLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_developers_link_ibfk_2");

            entity.HasOne(d => d.Game).WithMany(p => p.GamesDevelopersLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_developers_link_ibfk_1");
        });

        modelBuilder.Entity<GamesGenresLookupLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Game).WithMany(p => p.GamesGenresLookupLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_genres_lookup_link_ibfk_1");

            entity.HasOne(d => d.GenreLookup).WithMany(p => p.GamesGenresLookupLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_genres_lookup_link_ibfk_2");
        });

        modelBuilder.Entity<GamesPlatformsLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Game).WithMany(p => p.GamesPlatformsLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_platforms_link_ibfk_1");

            entity.HasOne(d => d.Platform).WithMany(p => p.GamesPlatformsLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_platforms_link_ibfk_2");
        });

        modelBuilder.Entity<GamesPublishersLink>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Game).WithMany(p => p.GamesPublishersLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_publishers_link_ibfk_1");

            entity.HasOne(d => d.Publisher).WithMany(p => p.GamesPublishersLink)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("games_publishers_link_ibfk_2");
        });

        modelBuilder.Entity<GenresLookup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Platforms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<PlayRecordComments>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.PlayRecord).WithMany(p => p.PlayRecordComments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("play_record_comments_ibfk_2");

            entity.HasOne(d => d.User).WithMany(p => p.PlayRecordComments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("play_record_comments_ibfk_1");
        });

        modelBuilder.Entity<PlayRecords>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Game).WithMany(p => p.PlayRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("play_records_ibfk_2");

            entity.HasOne(d => d.User).WithMany(p => p.PlayRecords)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("play_records_ibfk_1");
        });

        modelBuilder.Entity<Publishers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<UserRelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.HasOne(d => d.Friend).WithMany(p => p.UserRelationshipFriend)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_relationship_ibfk_2");

            entity.HasOne(d => d.RelationshipTypeLookup).WithMany(p => p.UserRelationship)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_relationship_ibfk_3");

            entity.HasOne(d => d.User).WithMany(p => p.UserRelationshipUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_relationship_ibfk_1");
        });

        modelBuilder.Entity<UserRelationshipTypeLookup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}