// <auto-generated />
using System;
using DataAccess.Contexts.DockerDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DockerDbContext))]
    [Migration("20240621070228_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.DockerDb.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlphaChannelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("alpha_channel_flag");

                    b.Property<bool>("AnimatedFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("animated_flag");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("GameId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_id");

                    b.Property<int>("Height")
                        .HasColumnType("int(11)")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<int>("Width")
                        .HasColumnType("int(11)")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameId" }, "game_id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique();

                    b.ToTable("artwork");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<bool>("DeveloperFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("developer_flag");

                    b.Property<DateOnly>("FoundedDate")
                        .HasColumnType("date")
                        .HasColumnName("founded_date");

                    b.Property<string>("ImageFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool>("PublisherFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("publisher_flag");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id1");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Games", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id2");

                    b.ToTable("games");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GamesCompaniesLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompaniesId")
                        .HasColumnType("int(11)")
                        .HasColumnName("companies_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<bool>("DeveloperFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("developer_flag");

                    b.Property<int>("GamesId")
                        .HasColumnType("int(11)")
                        .HasColumnName("games_id");

                    b.Property<bool>("PortingFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("porting_flag");

                    b.Property<bool>("PublisherFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("publisher_flag");

                    b.Property<bool>("SupportingFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("supporting_flag");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompaniesId" }, "companies_id");

                    b.HasIndex(new[] { "GamesId" }, "games_id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id3");

                    b.ToTable("games_companies_link");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GamesGenresLookupLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("GameId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_id");

                    b.Property<int>("GenreLookupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("genre_lookup_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameId" }, "game_id")
                        .HasDatabaseName("game_id1");

                    b.HasIndex(new[] { "GenreLookupId" }, "genre_lookup_id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id4");

                    b.ToTable("games_genres_lookup_link");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GamesPlatformsLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("GameId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_id");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int(11)")
                        .HasColumnName("platform_id");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameId" }, "game_id")
                        .HasDatabaseName("game_id2");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id5");

                    b.HasIndex(new[] { "PlatformId" }, "platform_id");

                    b.ToTable("games_platforms_link");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GenresLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id6");

                    b.ToTable("genres_lookup");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Platforms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("ImageFilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id7");

                    b.ToTable("platforms");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.PlayRecordComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("comment_text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("DownvoteCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("downvote_count");

                    b.Property<int>("PlayRecordId")
                        .HasColumnType("int(11)")
                        .HasColumnName("play_record_id");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("upvote_count");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id8");

                    b.HasIndex(new[] { "PlayRecordId" }, "play_record_id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("play_record_comments");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.PlayRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CompletedFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("completed_flag");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("GameId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_id");

                    b.Property<int?>("HoursPlayed")
                        .HasColumnType("int(11)")
                        .HasColumnName("hours_played");

                    b.Property<string>("PlayDescription")
                        .HasColumnType("mediumtext")
                        .HasColumnName("play_description");

                    b.Property<int?>("Rating")
                        .HasColumnType("int(11)")
                        .HasColumnName("rating");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameId" }, "game_id")
                        .HasDatabaseName("game_id3");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id9");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("play_records");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.UserRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("FriendId")
                        .HasColumnType("int(11)")
                        .HasColumnName("friend_id");

                    b.Property<int>("RelationshipTypeLookupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("relationship_type_lookup_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FriendId" }, "friend_id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id10");

                    b.HasIndex(new[] { "RelationshipTypeLookupId" }, "relationship_type_lookup_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("user_relationship");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.UserRelationshipTypeLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id11");

                    b.ToTable("user_relationship_type_lookup");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminFlag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("admin_flag");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("ImageFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_file_path");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Salt")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id12");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Artwork", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.Games", "Game")
                        .WithMany("Artwork")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("artwork_games_ibfk_1");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GamesCompaniesLink", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.Companies", "Companies")
                        .WithMany("GamesCompaniesLink")
                        .HasForeignKey("CompaniesId")
                        .IsRequired()
                        .HasConstraintName("games_companies_link_ibfk_2");

                    b.HasOne("DataAccess.Models.DockerDb.Games", "Games")
                        .WithMany("GamesCompaniesLink")
                        .HasForeignKey("GamesId")
                        .IsRequired()
                        .HasConstraintName("games_companies_link_ibfk_1");

                    b.Navigation("Companies");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GamesGenresLookupLink", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.Games", "Game")
                        .WithMany("GamesGenresLookupLink")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("games_genres_lookup_link_ibfk_1");

                    b.HasOne("DataAccess.Models.DockerDb.GenresLookup", "GenreLookup")
                        .WithMany("GamesGenresLookupLink")
                        .HasForeignKey("GenreLookupId")
                        .IsRequired()
                        .HasConstraintName("games_genres_lookup_link_ibfk_2");

                    b.Navigation("Game");

                    b.Navigation("GenreLookup");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GamesPlatformsLink", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.Games", "Game")
                        .WithMany("GamesPlatformsLink")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("games_platforms_link_ibfk_1");

                    b.HasOne("DataAccess.Models.DockerDb.Platforms", "Platform")
                        .WithMany("GamesPlatformsLink")
                        .HasForeignKey("PlatformId")
                        .IsRequired()
                        .HasConstraintName("games_platforms_link_ibfk_2");

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.PlayRecordComments", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.PlayRecords", "PlayRecord")
                        .WithMany("PlayRecordComments")
                        .HasForeignKey("PlayRecordId")
                        .IsRequired()
                        .HasConstraintName("play_record_comments_ibfk_2");

                    b.HasOne("DataAccess.Models.DockerDb.Users", "User")
                        .WithMany("PlayRecordComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("play_record_comments_ibfk_1");

                    b.Navigation("PlayRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.PlayRecords", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.Games", "Game")
                        .WithMany("PlayRecords")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("play_records_ibfk_2");

                    b.HasOne("DataAccess.Models.DockerDb.Users", "User")
                        .WithMany("PlayRecords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("play_records_ibfk_1");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.UserRelationship", b =>
                {
                    b.HasOne("DataAccess.Models.DockerDb.Users", "Friend")
                        .WithMany("UserRelationshipFriend")
                        .HasForeignKey("FriendId")
                        .IsRequired()
                        .HasConstraintName("user_relationship_ibfk_2");

                    b.HasOne("DataAccess.Models.DockerDb.UserRelationshipTypeLookup", "RelationshipTypeLookup")
                        .WithMany("UserRelationship")
                        .HasForeignKey("RelationshipTypeLookupId")
                        .IsRequired()
                        .HasConstraintName("user_relationship_ibfk_3");

                    b.HasOne("DataAccess.Models.DockerDb.Users", "User")
                        .WithMany("UserRelationshipUser")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_relationship_ibfk_1");

                    b.Navigation("Friend");

                    b.Navigation("RelationshipTypeLookup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Companies", b =>
                {
                    b.Navigation("GamesCompaniesLink");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Games", b =>
                {
                    b.Navigation("Artwork");

                    b.Navigation("GamesCompaniesLink");

                    b.Navigation("GamesGenresLookupLink");

                    b.Navigation("GamesPlatformsLink");

                    b.Navigation("PlayRecords");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.GenresLookup", b =>
                {
                    b.Navigation("GamesGenresLookupLink");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Platforms", b =>
                {
                    b.Navigation("GamesPlatformsLink");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.PlayRecords", b =>
                {
                    b.Navigation("PlayRecordComments");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.UserRelationshipTypeLookup", b =>
                {
                    b.Navigation("UserRelationship");
                });

            modelBuilder.Entity("DataAccess.Models.DockerDb.Users", b =>
                {
                    b.Navigation("PlayRecordComments");

                    b.Navigation("PlayRecords");

                    b.Navigation("UserRelationshipFriend");

                    b.Navigation("UserRelationshipUser");
                });
#pragma warning restore 612, 618
        }
    }
}
